time complexity of building a binary heap is O(N)
At first it would seem like the time complexity is
O(nlogn) as insert operation costs logn
and build heap func makes n such calls, but it is O(N)
as heap representation is of complete binary tree
there is a mathematical proof too.


heapify(iterable) :- This function is used to convert the iterable into a heap data structure. i.e. in heap order.
heapify nlogn --> but close to O(N)

heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. 
The order is adjusted, so as heap structure is maintained.
heappush --> o(logn) 

heappop(heap) :- This function is used to remove and return the smallest element from heap. 
The order is adjusted, so as heap structure is maintained.
heappop --> o(logn) 

heappushpop(heap, ele) :- This function combines the functioning of both push and pop operations in one statement, increasing efficiency.
Heap order is maintained after this operation

time complexity of heap sort is O(nlogn)